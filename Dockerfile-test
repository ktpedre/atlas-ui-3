# Test-specific Dockerfile with simple E2E testing dependencies
FROM fedora:latest

# Set working directory
WORKDIR /app

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies including Node.js
RUN dnf update -y && dnf install -y \
    python3 \
    python3-pip \
    python3-virtualenv \
    nodejs \
    npm \
    curl \
    hostname \
    wget \
    ca-certificates \
    dos2unix \
    && dnf clean all

# Install uv for better Python dependency management
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    mkdir -p /root/.local/bin
ENV PATH="/root/.local/bin:$PATH"

# Copy requirements first
COPY requirements.txt .

# Copy and install frontend dependencies (keep all dependencies for testing)
COPY frontend/package*.json ./frontend/
WORKDIR /app/frontend
ENV NPM_CONFIG_CACHE=/app/.npm
# Install ALL dependencies including devDependencies needed for testing
RUN npm ci --include=dev

# Build frontend (but keep node_modules for testing)
COPY frontend/ .
RUN npm run build
# DO NOT remove node_modules - we need them for testing

# Switch back to app directory and copy backend code
WORKDIR /app
COPY backend/ ./backend/

# Copy new config directory (defaults & overrides if present)
COPY config/ ./config/

# Copy other necessary files
COPY docs/ ./docs/
COPY scripts/ ./scripts/
COPY test/ ./test/
COPY test_e2e/ ./test_e2e/

# Fix line endings for the entire app directory and set permissions BEFORE any npm/npx commands
RUN find /app -type f \( -name "*.js" -o -name "*.json" -o -name "*.sh" -o -name "*.md" -o -name "*.txt" -o -name "*.py" \) -exec dos2unix {} \;
RUN find /app -type f -name "*.sh" -exec chmod +x {} \;

# Install requests for simple E2E testing using dnf
RUN dnf install -y python3-requests && dnf clean all

# Switch back to app directory and create required directories
WORKDIR /app
RUN mkdir -p \
        /app/backend/logs \
        /app/config/defaults \
        /app/config/overrides \
        /app/runtime/logs \
        /app/runtime/feedback \
        /app/runtime/uploads && \
    # Seed overrides from defaults if overrides is empty
    if [ -d /app/config/defaults ] && [ "$(ls -A /app/config/overrides 2>/dev/null | wc -l)" = "0" ]; then \
        cp -n /app/config/defaults/* /app/config/overrides/ 2>/dev/null || true; \
    fi && \
    # Place keep files so directories exist even if empty at runtime
    touch /app/runtime/logs/.gitkeep /app/runtime/feedback/.gitkeep /app/runtime/uploads/.gitkeep

# No special sudo configuration needed for simple E2E tests

# Create .env file for test environment (skip authentication and configure paths)
RUN echo "# Development mode - skip authentication when true" > /app/.env && \
    echo "DEBUG_MODE=true" >> /app/.env && \
    echo "# CI/CD mode - skip static file serving checks" >> /app/.env && \
    echo "CICD_MODE=true" >> /app/.env && \
    echo "# Use correct frontend path in container" >> /app/.env && \
    echo "USE_NEW_FRONTEND=true" >> /app/.env

# Set up uv for appuser
RUN mkdir -p /home/appuser/.local/bin && \
    if [ -f "/root/.local/bin/uv" ]; then cp /root/.local/bin/uv /home/appuser/.local/bin/; fi && \
    mkdir -p /home/appuser/.cache && \
    chown -R appuser:appuser /home/appuser/.local /home/appuser/.cache

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set up Python environment as appuser
ENV PATH="/home/appuser/.local/bin:$PATH"
RUN /home/appuser/.local/bin/uv python install 3.12
RUN /home/appuser/.local/bin/uv venv venv --python 3.12
ENV VIRTUAL_ENV=/app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python dependencies using uv
RUN /home/appuser/.local/bin/uv pip install -r requirements.txt

# Set environment variables
ENV PYTHONPATH=/app \
    NODE_ENV=test \
    APP_CONFIG_DEFAULTS=/app/config/defaults \
    APP_CONFIG_OVERRIDES=/app/config/overrides \
    RUNTIME_LOG_DIR=/app/runtime/logs \
    RUNTIME_FEEDBACK_DIR=/app/runtime/feedback

# Expose port
EXPOSE 8000

# Default command runs tests
WORKDIR /app
CMD ["bash", "/app/test/run_tests.sh", "all"]